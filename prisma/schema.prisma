generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Participant {
  id                 String           @id @default(cuid())
  fullName           String
  gender             String
  dateOfBirth        DateTime
  idNumber           String
  bloodType          String?
  email              String           @unique
  whatsapp           String
  address            String
  province           String
  city               String
  postalCode         String?
  category           String
  bibName            String
  jerseySize         String
  estimatedTime      String?
  emergencyName      String
  emergencyPhone     String
  emergencyRelation  String
  medicalHistory     String?
  allergies          String?
  medications        String?
  registrationCode   String           @unique @default(cuid())
  bibNumber          String?          @unique
  registrationType   String           @default("INDIVIDUAL")
  basePrice          Int
  jerseyAddOn        Int              @default(0)
  totalPrice         Int
  isEarlyBird        Boolean          @default(false)
  registrationStatus String           @default("PENDING")
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  certificate        Certificate?
  checkIns           CheckIn[]
  communityMember    CommunityMember?
  Notification       Notification[]
  payments           Payment[]
  racePack           RacePack?

  @@index([email])
  @@index([registrationCode])
  @@index([bibNumber])
  @@index([category])
  @@index([registrationStatus])
}

model CommunityRegistration {
  id                 String            @id @default(cuid())
  communityName      String
  communityType      String
  communityAddress   String
  picName            String
  picWhatsapp        String
  picEmail           String
  picPosition        String?
  registrationCode   String            @unique @default(cuid())
  totalMembers       Int
  category           String
  basePrice          Int
  totalBasePrice     Int
  promoAmount        Int               @default(0)
  jerseyAddOn        Int               @default(0)
  finalPrice         Int
  appliedPromo       String?
  registrationStatus String            @default("PENDING")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  members            CommunityMember[]
  payments           Payment[]

  @@index([registrationCode])
  @@index([communityName])
  @@index([picEmail])
}

model CommunityMember {
  id                      String                @id @default(cuid())
  communityRegistrationId String
  participantId           String                @unique
  memberNumber            Int
  isFreeMember            Boolean               @default(false)
  communityRegistration   CommunityRegistration @relation(fields: [communityRegistrationId], references: [id], onDelete: Cascade)
  participant             Participant           @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([communityRegistrationId])
}

model Payment {
  id                      String                 @id @default(cuid())
  paymentCode             String                 @unique @default(cuid())
  amount                  Int
  paymentMethod           String?
  paymentChannel          String?
  midtransOrderId         String?                @unique
  midtransToken           String?                @unique
  midtransResponse        Json?
  vaNumber                String?
  status                  String                 @default("PENDING")
  paidAt                  DateTime?
  expiredAt               DateTime?
  participantId           String?
  communityRegistrationId String?
  metadata                Json?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  communityRegistration   CommunityRegistration? @relation(fields: [communityRegistrationId], references: [id])
  participant             Participant?           @relation(fields: [participantId], references: [id])

  @@index([paymentCode])
  @@index([midtransOrderId])
  @@index([status])
  @@index([participantId])
  @@index([communityRegistrationId])
}

model RacePack {
  id             String      @id @default(cuid())
  participantId  String      @unique
  qrCode         String      @unique @default(cuid())
  isCollected    Boolean     @default(false)
  collectedAt    DateTime?
  collectedBy    String?
  collectorName  String?
  collectorPhone String?
  hasJersey      Boolean     @default(true)
  hasBib         Boolean     @default(true)
  hasMedal       Boolean     @default(false)
  hasGoodieBag   Boolean     @default(true)
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  participant    Participant @relation(fields: [participantId], references: [id])

  @@index([qrCode])
  @@index([isCollected])
}

model CheckIn {
  id                 String      @id @default(cuid())
  participantId      String
  checkPoint         String
  checkTime          DateTime
  chipTime           String?
  gunTime            String?
  verifiedBy         String?
  verificationMethod String?
  createdAt          DateTime    @default(now())
  participant        Participant @relation(fields: [participantId], references: [id])

  @@unique([participantId, checkPoint])
  @@index([participantId])
  @@index([checkPoint])
  @@index([checkTime])
}

model Certificate {
  id                String      @id @default(cuid())
  participantId     String      @unique
  certificateNumber String      @unique @default(cuid())
  finishTime        String?
  rank              Int?
  categoryRank      Int?
  fileUrl           String?
  isGenerated       Boolean     @default(false)
  generatedAt       DateTime?
  downloadCount     Int         @default(0)
  lastDownloadAt    DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  participant       Participant @relation(fields: [participantId], references: [id])

  @@index([certificateNumber])
}

model Admin {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String
  role      String     @default("ADMIN")
  isActive  Boolean    @default(true)
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  logs      AdminLog[]

  @@index([email])
}

model AdminLog {
  id        String   @id @default(cuid())
  adminId   String
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  admin     Admin    @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([action])
  @@index([createdAt])
}

model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  updatedAt   DateTime @updatedAt

  @@index([key])
}

model Notification {
  id             String       @id @default(cuid())
  recipientEmail String?
  recipientPhone String?
  participantId  String?
  type           String
  category       String
  subject        String?
  message        String
  status         String       @default("PENDING")
  sentAt         DateTime?
  failureReason  String?
  metadata       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  participant    Participant? @relation(fields: [participantId], references: [id])

  @@index([participantId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model IdempotencyKey {
  id          String   @id @default(cuid())
  key         String   @unique
  requestHash String   @map("request_hash")
  response    Json?
  status      String   @default("processing")
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime @map("expires_at")

  @@index([expiresAt])
  @@index([key, status])
  @@map("idempotency_keys")
}

model RegistrationAttempt {
  id           String   @id @default(cuid())
  email        String
  category     String
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  attemptData  Json?    @map("attempt_data")
  success      Boolean  @default(false)
  errorMessage String?  @map("error_message")
  createdAt    DateTime @default(now()) @map("created_at")

  @@index([email, createdAt(sort: Desc)])
  @@map("registration_attempts")
}
